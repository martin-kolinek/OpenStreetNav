// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "bound-pskel.hxx"

// bound_pskel
//

void bound_pskel::
box_parser (::xml_schema::string_pskel& p)
{
  this->box_parser_ = &p;
}

void bound_pskel::
origin_parser (::xml_schema::uri_pskel& p)
{
  this->origin_parser_ = &p;
}

void bound_pskel::
parsers (::xml_schema::string_pskel& box,
         ::xml_schema::uri_pskel& origin)
{
  this->box_parser_ = &box;
  this->origin_parser_ = &origin;
}

bound_pskel::
bound_pskel ()
: box_parser_ (0),
  origin_parser_ (0)
{
}

// bound_pskel
//

void bound_pskel::
box (const ::std::string&)
{
}

void bound_pskel::
origin (const ::std::string&)
{
}

void bound_pskel::
post_bound ()
{
}

#include <cassert>

// Attribute validation and dispatch functions for bound_pskel.
//
bool bound_pskel::
_attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string& s)
{
  if (n == "box" && ns.empty ())
  {
    if (this->box_parser_)
    {
      this->box_parser_->pre ();
      this->box_parser_->_pre_impl ();
      this->box_parser_->_characters (s);
      this->box_parser_->_post_impl ();
      const ::std::string& tmp (this->box_parser_->post_string ());
      this->box (tmp);
    }

    return true;
  }

  if (n == "origin" && ns.empty ())
  {
    if (this->origin_parser_)
    {
      this->origin_parser_->pre ();
      this->origin_parser_->_pre_impl ();
      this->origin_parser_->_characters (s);
      this->origin_parser_->_post_impl ();
      const ::std::string& tmp (this->origin_parser_->post_uri ());
      this->origin (tmp);
    }

    return true;
  }

  return false;
}

// Begin epilogue.
//
//
// End epilogue.

