// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include "tag-pskel.hxx"

// tag_pskel
//

void tag_pskel::
k_parser (::xml_schema::string_pskel& p)
{
  this->k_parser_ = &p;
}

void tag_pskel::
v_parser (::xml_schema::string_pskel& p)
{
  this->v_parser_ = &p;
}

void tag_pskel::
parsers (::xml_schema::string_pskel& k,
         ::xml_schema::string_pskel& v)
{
  this->k_parser_ = &k;
  this->v_parser_ = &v;
}

tag_pskel::
tag_pskel ()
: k_parser_ (0),
  v_parser_ (0),
  v_state_attr_stack_ (sizeof (v_state_attr_), &v_state_attr_first_)
{
}

// tag_pskel
//

void tag_pskel::
k (const ::std::string&)
{
}

void tag_pskel::
v (const ::std::string&)
{
}

#include <cassert>

// Attribute validation and dispatch functions for tag_pskel.
//
bool tag_pskel::
_attribute_impl_phase_one (const ::xml_schema::ro_string& ns,
                           const ::xml_schema::ro_string& n,
                           const ::xml_schema::ro_string& s)
{
  if (n == "k" && ns.empty ())
  {
    if (this->k_parser_)
    {
      this->k_parser_->pre ();
      this->k_parser_->_pre_impl ();
      this->k_parser_->_characters (s);
      this->k_parser_->_post_impl ();
      const ::std::string& tmp (this->k_parser_->post_string ());
      this->k (tmp);
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->k = true;
    return true;
  }

  if (n == "v" && ns.empty ())
  {
    if (this->v_parser_)
    {
      this->v_parser_->pre ();
      this->v_parser_->_pre_impl ();
      this->v_parser_->_characters (s);
      this->v_parser_->_post_impl ();
      const ::std::string& tmp (this->v_parser_->post_string ());
      this->v (tmp);
    }

    static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ())->v = true;
    return true;
  }

  return false;
}

void tag_pskel::
_pre_a_validate ()
{
  this->v_state_attr_stack_.push ();
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  as.k = false;
  as.v = false;
}

void tag_pskel::
_post_a_validate ()
{
  v_state_attr_& as = *static_cast< v_state_attr_* > (this->v_state_attr_stack_.top ());

  if (!as.k)
    this->_expected_attribute (
      "", "k");
  if (!as.v)
    this->_expected_attribute (
      "", "v");

  this->v_state_attr_stack_.pop ();
}

// Begin epilogue.
//
//
// End epilogue.

